{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/assign.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar isIndexMode = require( '@stdlib/ndarray-base-assert-is-index-mode' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.mode] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'throw',\n*     'order': 'column-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isIndexMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized mode. Option: `%s`.', 'mode', opts.mode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized order. Option: `%s`.', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerArray = require( '@stdlib/assert-is-nonnegative-integer-array' ).primitives;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar getSubscripts = require( '@stdlib/ndarray-base-ind2sub' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Converts a linear index to an array of subscripts.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   `throw`: throws an error when a linear index exceeds array dimensions.\n*     -   `wrap`: wrap around a linear index exceeding array dimensions using modulo arithmetic.\n*     -   `clamp`: set a linear index exceeding array dimensions to either `0` (minimum linear index) or the maximum linear index.\n*\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {integer} idx - linear index\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @throws {TypeError} shape argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} linear index argument must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a linear index which does not exceed array dimensions\n* @returns {NonNegativeIntegerArray} subscripts\n*\n* @example\n* var s = ind2sub( [ 3, 3, 3 ], 17 );\n* // returns [ 1, 2, 2 ]\n*/\nfunction ind2sub( shape, idx, options ) {\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\topts.mode = defaults.mode;\n\topts.order = defaults.order;\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Shape argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Linear index argument must be integer valued. Value: `%s`.', idx ) );\n\t}\n\t// Note: strides are positive, so offset is always zero\n\treturn getSubscripts( shape, shape2strides( shape, opts.order ), 0, opts.order, idx, opts.mode ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = ind2sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerArray = require( '@stdlib/assert-is-nonnegative-integer-array' ).primitives;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar getSubscripts = require( '@stdlib/ndarray-base-ind2sub' ).assign;\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Converts a linear index to an array of subscripts and assigns results to a provided output array.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   `throw`: throws an error when a linear index exceeds array dimensions.\n*     -   `wrap`: wrap around a linear index exceeding array dimensions using modulo arithmetic.\n*     -   `clamp`: set a linear index exceeding array dimensions to either `0` (minimum linear index) or the maximum linear index.\n*\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {integer} idx - linear index\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {(Array|TypedArray|Object)} out - output array\n* @throws {TypeError} output argument must be either an array, typed array, or an object\n* @throws {TypeError} shape argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} linear index argument must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a linear index which does not exceed array dimensions\n* @returns {NonNegativeIntegerArray} subscripts\n*\n* @example\n* var shape = [ 3, 3, 3 ];\n* var out = [ 0, 0, 0 ];\n*\n* var s = ind2sub( shape, 17, out );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( s === out );\n* // returns true\n*/\nfunction ind2sub( shape, idx, options, out ) {\n\tvar opts;\n\tvar dest;\n\tvar err;\n\n\topts = {};\n\topts.mode = defaults.mode;\n\topts.order = defaults.order;\n\tif ( arguments.length === 4 ) {\n\t\terr = validate( opts, arguments[ 2 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( typeof out !== 'object' || out === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be either an array, typed array, or object. Value: `%s`.', out ) );\n\t\t}\n\t\tdest = out;\n\t} else {\n\t\tdest = options;\n\t\tif ( typeof dest !== 'object' || dest === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be either an array, typed array, or object. Value: `%s`.', dest ) );\n\t\t}\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Shape argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Linear index argument must be integer valued. Value: `%s`.', idx ) );\n\t}\n\t// Note: strides are positive, so offset is always zero\n\treturn getSubscripts( shape, shape2strides( shape, opts.order ), 0, opts.order, idx, opts.mode, dest ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = ind2sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a linear index to an array of subscripts.\n*\n* @module @stdlib/ndarray-ind2sub\n*\n* @example\n* var ind2sub = require( '@stdlib/ndarray-ind2sub' );\n*\n* var s = ind2sub( [ 3, 3, 3 ], 17 );\n* // returns [ 1, 2, 2 ]\n*\n* @example\n* var ind2sub = require( '@stdlib/ndarray-ind2sub' );\n*\n* var shape = [ 3, 3, 3 ];\n* var out = [ 0, 0, 0 ];\n*\n* var s = ind2sub.assign( shape, 17, out );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( s === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["isObject","require$$0","hasOwnProp","require$$1","isOrder","require$$2","isIndexMode","require$$3","format","require$$4","validate_1","opts","options","mode","TypeError","order","isNonNegativeIntegerArray","primitives","isInteger","isPrimitive","shape2strides","getSubscripts","defaults","require$$5","validate","require$$6","main","shape","idx","err","arguments","length","assign","out","dest","lib"],"mappings":";;q9BAsBIA,EAAWC,EACXC,EAAaC,EACbC,EAAUC,EACVC,EAAcC,EACdC,EAASC,EAgDb,IAAAC,EAtBA,SAAmBC,EAAMC,GACxB,OAAMZ,EAAUY,GAGXV,EAAYU,EAAS,UACzBD,EAAKE,KAAOD,EAAQC,MACdP,EAAaK,EAAKE,OAChB,IAAIC,UAAWN,EAAQ,iFAAkF,OAAQG,EAAKE,OAG1HX,EAAYU,EAAS,WACzBD,EAAKI,MAAQH,EAAQG,OACfX,EAASO,EAAKI,QACZ,IAAID,UAAWN,EAAQ,kFAAmF,QAASG,EAAKI,QAG1H,KAdC,IAAID,UAAWN,EAAQ,qEAAsEI,KChClGI,EAA4Bf,EAAyDgB,WACrFC,EAAYf,EAAuCgB,YACnDC,EAAgBf,EAChBgB,EAAgBd,EAChBC,EAASC,EACTa,EAAWC,EACXC,EAAWC,EA2Df,IAAAC,EA1BA,SAAkBC,EAAOC,EAAKhB,GAC7B,IAAID,EACAkB,EAKJ,IAHAlB,EAAO,IACFE,KAAOS,EAAST,KACrBF,EAAKI,MAAQO,EAASP,MACjBe,UAAUC,OAAS,IACvBF,EAAML,EAAUb,EAAMC,IAErB,MAAMiB,EAGR,IAAMb,EAA2BW,GAChC,MAAM,IAAIb,UAAWN,EAAQ,8GAA+GmB,IAE7I,IAAMT,EAAWU,GAChB,MAAM,IAAId,UAAWN,EAAQ,+EAAgFoB,IAG9G,OAAOP,EAAeM,EAAOP,EAAeO,EAAOhB,EAAKI,OAAS,EAAGJ,EAAKI,MAAOa,EAAKjB,EAAKE,OC3DvFG,EAA4Bf,EAAyDgB,WACrFC,EAAYf,EAAuCgB,YACnDC,EAAgBf,EAChBgB,EAAgBd,EAA0CyB,OAC1DxB,EAASC,EACTa,EAAWC,EACXC,EAAWC,EA6Ef,IC1DAC,EAAAvB,EACA6B,EDqBA,SAAkBL,EAAOC,EAAKhB,EAASqB,GACtC,IAAItB,EACAuB,EACAL,EAKJ,IAHAlB,EAAO,IACFE,KAAOS,EAAST,KACrBF,EAAKI,MAAQO,EAASP,MACI,IAArBe,UAAUC,OAAe,CAE7B,GADAF,EAAML,EAAUb,EAAMmB,UAAW,IAEhC,MAAMD,EAEP,GAAoB,iBAARI,GAA4B,OAARA,EAC/B,MAAM,IAAInB,UAAWN,EAAQ,kGAAmGyB,IAEjIC,EAAOD,OAGP,GAAqB,iBADrBC,EAAOtB,IACmC,OAATsB,EAChC,MAAM,IAAIpB,UAAWN,EAAQ,kGAAmG0B,IAGlI,IAAMlB,EAA2BW,GAChC,MAAM,IAAIb,UAAWN,EAAQ,8GAA+GmB,IAE7I,IAAMT,EAAWU,GAChB,MAAM,IAAId,UAAWN,EAAQ,+EAAgFoB,IAG9G,OAAOP,EAAeM,EAAOP,EAAeO,EAAOhB,EAAKI,OAAS,EAAGJ,EAAKI,MAAOa,EAAKjB,EAAKE,KAAMqB,ICrDjGjC,EAOAyB,EAAA,SAAAM,GAKA,IAAAG,EAAAT"}