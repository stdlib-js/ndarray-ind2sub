{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/validate.js", "../lib/main.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"mode\": \"throw\",\n\t\"order\": \"row-major\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar isIndexMode = require( '@stdlib/ndarray-base-assert-is-index-mode' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.mode] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'throw',\n*     'order': 'column-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isIndexMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized mode. Option: `%s`.', 'mode', opts.mode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized order. Option: `%s`.', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerArray = require( '@stdlib/assert-is-nonnegative-integer-array' ).primitives;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar getSubscripts = require( '@stdlib/ndarray-base-ind2sub' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Converts a linear index to an array of subscripts.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   **throw**: throw an error when a linear index exceeds array dimensions.\n*     -   **normalize**: normalize negative linear indices and throw an error when a linear index exceeds array dimensions.\n*     -   **wrap**: wrap around a linear index exceeding array dimensions using modulo arithmetic.\n*     -   **clamp**: set a linear index exceeding array dimensions to either `0` (minimum linear index) or the maximum linear index.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {integer} idx - linear index\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @throws {TypeError} shape argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} linear index argument must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a linear index which does not exceed array dimensions\n* @returns {NonNegativeIntegerArray} subscripts\n*\n* @example\n* var s = ind2sub( [ 3, 3, 3 ], 17 );\n* // returns [ 1, 2, 2 ]\n*/\nfunction ind2sub( shape, idx, options ) {\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\topts.mode = defaults.mode;\n\topts.order = defaults.order;\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Shape argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Linear index must be integer valued. Value: `%s`.', idx ) );\n\t}\n\t// Note: strides are positive, so offset is always zero\n\treturn getSubscripts( shape, shape2strides( shape, opts.order ), 0, opts.order, idx, opts.mode ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = ind2sub;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerArray = require( '@stdlib/assert-is-nonnegative-integer-array' ).primitives;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar getSubscripts = require( '@stdlib/ndarray-base-ind2sub' ).assign;\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Converts a linear index to an array of subscripts and assigns results to a provided output array.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   **throw**: throw an error when a linear index exceeds array dimensions.\n*     -   **normalize**: normalize negative linear indices and throw an error when a linear index exceeds array dimensions.\n*     -   **wrap**: wrap around a linear index exceeding array dimensions using modulo arithmetic.\n*     -   **clamp**: set a linear index exceeding array dimensions to either `0` (minimum linear index) or the maximum linear index.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {integer} idx - linear index\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {(Array|TypedArray|Object)} out - output array\n* @throws {TypeError} output argument must be either an array, typed array, or an object\n* @throws {TypeError} shape argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} linear index argument must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a linear index which does not exceed array dimensions\n* @returns {NonNegativeIntegerArray} subscripts\n*\n* @example\n* var shape = [ 3, 3, 3 ];\n* var out = [ 0, 0, 0 ];\n*\n* var s = ind2sub( shape, 17, out );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( s === out );\n* // returns true\n*/\nfunction ind2sub( shape, idx, options, out ) {\n\tvar opts;\n\tvar dest;\n\tvar err;\n\n\topts = {};\n\topts.mode = defaults.mode;\n\topts.order = defaults.order;\n\tif ( arguments.length === 4 ) {\n\t\terr = validate( opts, arguments[ 2 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( typeof out !== 'object' || out === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be either an array, typed array, or object. Value: `%s`.', out ) );\n\t\t}\n\t\tdest = out;\n\t} else {\n\t\tdest = options;\n\t\tif ( typeof dest !== 'object' || dest === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be either an array, typed array, or object. Value: `%s`.', dest ) );\n\t\t}\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Shape argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Linear index must be integer valued. Value: `%s`.', idx ) );\n\t}\n\t// Note: strides are positive, so offset is always zero\n\treturn getSubscripts( shape, shape2strides( shape, opts.order ), 0, opts.order, idx, opts.mode, dest ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = ind2sub;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a linear index to an array of subscripts.\n*\n* @module @stdlib/ndarray-ind2sub\n*\n* @example\n* var ind2sub = require( '@stdlib/ndarray-ind2sub' );\n*\n* var s = ind2sub( [ 3, 3, 3 ], 17 );\n* // returns [ 1, 2, 2 ]\n*\n* @example\n* var ind2sub = require( '@stdlib/ndarray-ind2sub' );\n*\n* var shape = [ 3, 3, 3 ];\n* var out = [ 0, 0, 0 ];\n*\n* var s = ind2sub.assign( shape, 17, out );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( s === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isOrder", "isIndexMode", "format", "validate", "opts", "options", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeIntegerArray", "isInteger", "shape2strides", "getSubscripts", "format", "defaults", "validate", "ind2sub", "shape", "idx", "options", "opts", "err", "require_assign", "__commonJSMin", "exports", "module", "isNonNegativeIntegerArray", "isInteger", "shape2strides", "getSubscripts", "format", "defaults", "validate", "ind2sub", "shape", "idx", "options", "out", "opts", "dest", "err", "setReadOnly", "main", "assign"]
}
